type CloningStrategy
  {
    sequences: [Sequence]!
    sources: [Source]!
    primers: [Primer]
    description: String
  }

type CutSource
  {
    id: Integer!
    input: [Integer]
    output: Integer
    type: String
    leftCut: SequenceCut
    rightCut: SequenceCut
  }

type GenomeCoordinatesSource
  {
    id: Integer!
    input: [Integer]
    output: Integer
    type: String
    assemblyAccession: String
    sequenceAccession: String!
    locusTag: String
    geneId: Integer
    start: Integer!
    stop: Integer!
    strand: Integer!
  }

type ManuallyTypedSource
  {
    id: Integer!
    input: [Integer]
    output: Integer
    type: String
    userInput: String!
  }

type NamedThing
  {
    id: Integer!
  }

type Primer
  {
    id: Integer!
    name: String
    sequence: String
  }

type RepositoryIdSource
  {
    id: Integer!
    input: [Integer]
    output: Integer
    type: String
    repositoryName: RepositoryName!
    repositoryId: String!
  }

type RestrictionCutSource
  {
    id: Integer!
    input: [Integer]
    output: Integer
    type: String
    leftCut: RestrictionSequenceCut
    rightCut: RestrictionSequenceCut
  }

type RestrictionSequenceCut
  {
    id: Integer!
    cutWatson: Integer
    overhang: Integer
    restrictionEnzyme: String!
  }

interface Sequence
  {
    id: Integer!
    type: String
  }

type SequenceCut
  {
    id: Integer!
    cutWatson: Integer
    overhang: Integer
  }

interface Source
  {
    id: Integer!
    input: [Integer]
    output: Integer
    type: String
  }

type TextFileSequence
  {
    id: Integer!
    type: String
    sequenceFileFormat: SequenceFileFormat!
    fileContent: String
    overhangCrick3prime: Integer
    overhangWatson3prime: Integer
  }

type UploadedFileSource
  {
    id: Integer!
    input: [Integer]
    output: Integer
    type: String
    sequenceFileFormat: SequenceFileFormat!
    fileName: String
    indexInFile: Integer
  }

